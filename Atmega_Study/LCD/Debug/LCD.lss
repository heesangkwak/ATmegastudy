
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eb5  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000945  00000000  00000000  00001225  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ae  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000464  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006f8  00000000  00000000  00002544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002c3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	a1 d0       	rcall	.+322    	; 0x1dc <main>
  9a:	dd c0       	rjmp	.+442    	; 0x256 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <CMD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	ef e9       	ldi	r30, 0x9F	; 159
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <CMD+0x4>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <CMD+0xa>
  a8:	00 00       	nop
void CMD(unsigned char function)
{
	_delay_ms(1); //이거 없으면 안됨 왜인지는 잘모르겠음 
	//타임다이어그램을 봐도 여기부분은 잘모르겠다 
	//(마음에 준비가 필요해보임)
	PORTC = 0x00; //RS, RW, E =0
  aa:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	00 00       	nop
	_delay_us(0.06); // 0.06us 정도로 잡아야하지만 지금 테스트
	PORTC = 0x04; //E set
  ae:	94 e0       	ldi	r25, 0x04	; 4
  b0:	95 bb       	out	0x15, r25	; 21
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <CMD+0x16>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <CMD+0x18>
	_delay_us(0.2); // 150ns = 0.15us
	
	PORTF = function & 0xff;
  b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <CMD+0x1e>
	_delay_us(0.1); // 0.09us;
	PORTC = 0x00;
  bc:	15 ba       	out	0x15, r1	; 21
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <init_LCC>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	83 ef       	ldi	r24, 0xF3	; 243
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <init_LCC+0x6>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <init_LCC+0x10>
  d2:	00 00       	nop
}

void init_LCC()
{
	_delay_ms(40);
	CMD(Function);
  d4:	80 e3       	ldi	r24, 0x30	; 48
  d6:	e3 df       	rcall	.-58     	; 0x9e <CMD>
  d8:	8f e1       	ldi	r24, 0x1F	; 31
  da:	9e e4       	ldi	r25, 0x4E	; 78
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <init_LCC+0x1a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <init_LCC+0x20>
  e2:	00 00       	nop
	_delay_ms(5);
	CMD(Function);
  e4:	80 e3       	ldi	r24, 0x30	; 48
  e6:	db df       	rcall	.-74     	; 0x9e <CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 e9       	ldi	r24, 0x93	; 147
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <init_LCC+0x2a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <init_LCC+0x30>
	_delay_us(101);
	CMD(Function);
  f2:	00 00       	nop
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	d3 df       	rcall	.-90     	; 0x9e <CMD>
	_delay_us(0.1);
	
	CMD(Function_Set);
  f8:	00 c0       	rjmp	.+0      	; 0xfa <init_LCC+0x38>
  fa:	88 e3       	ldi	r24, 0x38	; 56
  fc:	d0 df       	rcall	.-96     	; 0x9e <CMD>
  fe:	95 ed       	ldi	r25, 0xD5	; 213
 100:	9a 95       	dec	r25
 102:	f1 f7       	brne	.-4      	; 0x100 <init_LCC+0x3e>
	_delay_us(40);
	CMD(Display_ON);
 104:	00 00       	nop
 106:	8c e0       	ldi	r24, 0x0C	; 12
 108:	ca df       	rcall	.-108    	; 0x9e <CMD>
 10a:	25 ed       	ldi	r18, 0xD5	; 213
 10c:	2a 95       	dec	r18
 10e:	f1 f7       	brne	.-4      	; 0x10c <init_LCC+0x4a>
	_delay_us(40);
	CMD(Clear_Display);
 110:	00 00       	nop
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	c4 df       	rcall	.-120    	; 0x9e <CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	98 e1       	ldi	r25, 0x18	; 24
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <init_LCC+0x58>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <init_LCC+0x5e>
	_delay_ms(1.54);
	CMD(Entry_Mode_Set);
 120:	00 00       	nop
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	bc df       	rcall	.-136    	; 0x9e <CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	95 ed       	ldi	r25, 0xD5	; 213
 128:	9a 95       	dec	r25
 12a:	f1 f7       	brne	.-4      	; 0x128 <init_LCC+0x66>
 12c:	00 00       	nop
 12e:	08 95       	ret

00000130 <input_data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	ef e9       	ldi	r30, 0x9F	; 159
 132:	ff e0       	ldi	r31, 0x0F	; 15
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <input_data+0x4>
 138:	00 c0       	rjmp	.+0      	; 0x13a <input_data+0xa>
 13a:	00 00       	nop
}

void input_data(unsigned char c)
{
	_delay_ms(1);
	PORTC = 0x01; //RS=1, RW, E =0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	00 00       	nop
	_delay_us(0.06);
	PORTC = 0x05; //E set ,RS set
 142:	95 e0       	ldi	r25, 0x05	; 5
 144:	95 bb       	out	0x15, r25	; 21
 146:	00 c0       	rjmp	.+0      	; 0x148 <input_data+0x18>
 148:	00 c0       	rjmp	.+0      	; 0x14a <input_data+0x1a>
	_delay_us(0.2); // 150ns = 0.15us
	
	PORTF = c & 0xff;
 14a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <input_data+0x20>
	_delay_us(0.1);
	PORTC = 0x00; //E = 0 RW = 0 RS = 0
 150:	15 ba       	out	0x15, r1	; 21
 152:	f5 e0       	ldi	r31, 0x05	; 5
 154:	fa 95       	dec	r31
 156:	f1 f7       	brne	.-4      	; 0x154 <input_data+0x24>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <input_string>:
	_delay_us(1);
}

void input_string(unsigned char* arr)
{
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
	while (1)
	{
		if (i > 15)
		break;
		
		if(arr[i] == NULL)
 16a:	88 81       	ld	r24, Y
 16c:	81 11       	cpse	r24, r1
 16e:	18 c0       	rjmp	.+48     	; 0x1a0 <input_string+0x44>
 170:	20 c0       	rjmp	.+64     	; 0x1b2 <input_string+0x56>
 172:	f7 01       	movw	r30, r14
 174:	81 91       	ld	r24, Z+
 176:	7f 01       	movw	r14, r30
 178:	88 23       	and	r24, r24
 17a:	d9 f0       	breq	.+54     	; 0x1b2 <input_string+0x56>
		return;
		
		input_data(arr[i]);
 17c:	d9 df       	rcall	.-78     	; 0x130 <input_data>
		i++;
 17e:	21 96       	adiw	r28, 0x01	; 1
{
	int i =0;

	while (1)
	{
		if (i > 15)
 180:	c0 31       	cpi	r28, 0x10	; 16
 182:	d1 05       	cpc	r29, r1
 184:	b1 f7       	brne	.-20     	; 0x172 <input_string+0x16>
		return;
		
		input_data(arr[i]);
		i++;
	}
	CMD(Line_2);
 186:	80 ec       	ldi	r24, 0xC0	; 192
 188:	8a df       	rcall	.-236    	; 0x9e <CMD>
	while(1)
	{
		if(arr[i] == NULL)
 18a:	f8 01       	movw	r30, r16
 18c:	80 89       	ldd	r24, Z+16	; 0x10
 18e:	88 23       	and	r24, r24
 190:	81 f0       	breq	.+32     	; 0x1b2 <input_string+0x56>
 192:	e8 01       	movw	r28, r16
		return;
		
		input_data(arr[i]);
 194:	61 96       	adiw	r28, 0x11	; 17
 196:	cc df       	rcall	.-104    	; 0x130 <input_data>
		i++;
	}
	CMD(Line_2);
	while(1)
	{
		if(arr[i] == NULL)
 198:	89 91       	ld	r24, Y+
 19a:	81 11       	cpse	r24, r1
 19c:	fc cf       	rjmp	.-8      	; 0x196 <input_string+0x3a>
 19e:	09 c0       	rjmp	.+18     	; 0x1b2 <input_string+0x56>
		break;
		
		if(arr[i] == NULL)
		return;
		
		input_data(arr[i]);
 1a0:	8e 01       	movw	r16, r28
 1a2:	c6 df       	rcall	.-116    	; 0x130 <input_data>
 1a4:	7e 01       	movw	r14, r28
 1a6:	ff ef       	ldi	r31, 0xFF	; 255
 1a8:	ef 1a       	sub	r14, r31
 1aa:	ff 0a       	sbc	r15, r31
		i++;
 1ac:	c1 e0       	ldi	r28, 0x01	; 1
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
 1b0:	e0 cf       	rjmp	.-64     	; 0x172 <input_string+0x16>
		return;
		
		input_data(arr[i]);
		i++;
	}
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	ff 90       	pop	r15
 1bc:	ef 90       	pop	r14
 1be:	08 95       	ret

000001c0 <init_uart>:

void init_uart()
{
	UBRR0H = 0x00;
 1c0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x67;
 1c4:	87 e6       	ldi	r24, 0x67	; 103
 1c6:	89 b9       	out	0x09, r24	; 9
	UCSR0B = 0x10;
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 1d2:	08 95       	ret

000001d4 <rx>:
}

unsigned char rx()
{
	while((UCSR0A & 0x80) != 0x80)
 1d4:	5f 9b       	sbis	0x0b, 7	; 11
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <rx>
		;
	
	return UDR0;
 1d8:	8c b1       	in	r24, 0x0c	; 12
 1da:	08 95       	ret

000001dc <main>:
void input_data(unsigned char c);
void input_string(unsigned char * arr);
void init_uart();
unsigned char rx();
int main(void)
{
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	a4 97       	sbiw	r28, 0x24	; 36
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
	unsigned char string[36];
	DDRF = 0xff;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRC = 0xff;
 1fe:	84 bb       	out	0x14, r24	; 20
	init_uart();
 200:	df df       	rcall	.-66     	; 0x1c0 <init_uart>
	init_LCC();
 202:	5f df       	rcall	.-322    	; 0xc2 <init_LCC>
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	7c 01       	movw	r14, r24
 20a:	00 e0       	ldi	r16, 0x00	; 0
	int i = 0,proccesser = 0;
 20c:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		unsigned value = rx();
 20e:	e2 df       	rcall	.-60     	; 0x1d4 <rx>
 210:	8a 30       	cpi	r24, 0x0A	; 10
		
		if (value == '\n')
 212:	31 f0       	breq	.+12     	; 0x220 <main+0x44>
 214:	f7 01       	movw	r30, r14
			string[i] = NULL;
			proccesser = 1;
		}
		else 
		{
			string[i]= value;
 216:	81 93       	st	Z+, r24
 218:	7f 01       	movw	r14, r30
 21a:	0f 5f       	subi	r16, 0xFF	; 255
			i++;
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
 21e:	f7 cf       	rjmp	.-18     	; 0x20e <main+0x32>
 220:	e1 e0       	ldi	r30, 0x01	; 1
	{
		unsigned value = rx();
		
		if (value == '\n')
		{
			string[i] = NULL;
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	ec 0f       	add	r30, r28
 226:	fd 1f       	adc	r31, r29
 228:	e0 0f       	add	r30, r16
 22a:	f1 1f       	adc	r31, r17
 22c:	10 82       	st	Z, r1
		}
		
		if (proccesser == 1)
			break;	
	}
	CMD(Line_1);
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	36 df       	rcall	.-404    	; 0x9e <CMD>
	input_string(string);	
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	92 df       	rcall	.-220    	; 0x15c <input_string>
 238:	80 e0       	ldi	r24, 0x00	; 0
}
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	a4 96       	adiw	r28, 0x24	; 36
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	08 95       	ret

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
