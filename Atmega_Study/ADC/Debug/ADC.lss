
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000897  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d4  00000000  00000000  00000a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027f  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ec  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	11 d0       	rcall	.+34     	; 0xbc <main>
  9a:	19 c0       	rjmp	.+50     	; 0xce <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <init_adc>:
	}
}

void init_adc()
{
	ADMUX |= 0x02; // vext (5v) 사용하고 adc2 pin 사용 
  9e:	39 9a       	sbi	0x07, 1	; 7
	ADCSRA |= 0x87; // adc 사용한다 , 7 = 프리스케일 128 로 설정
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	87 68       	ori	r24, 0x87	; 135
  a4:	86 b9       	out	0x06, r24	; 6
	DDRA = 0xff; // A pin전부 output으로 
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret

000000ac <adc_read>:

unsigned short adc_read()
{
	unsigned char high ,low; // 8bit 변수
	unsigned short value; // 16비트 변수
	ADCSRA |= 0x40; // start converter 1로 세트
  ac:	36 9a       	sbi	0x06, 6	; 6
	while ((ADCSRA & 0x10) !=0x10); 
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <adc_read+0x2>
	// converter 가 완료되면 ADIF 가 1로 세트되는것을 이용 while 문에서 1이 될때까지 무한반복 돌림
	
	high = ADCH; 
  b2:	25 b1       	in	r18, 0x05	; 5
	//	adc의 상위 8bit를 high 에 저장 상위비트를 저장한것뿐 이자체가 상위비트가 아니다 그래서 value 값을 할때 shift 8bit을 시킨것
	low = ADCL;  
  b4:	84 b1       	in	r24, 0x04	; 4
	// adc의 하위 8bit를 low 에 저장한다 
	value =(high << 8)|low; 
	// high를 상위 8 bit 로 올리고 하위 8 bit 연산시켜서 16bit의 value를 만든다
	return value;	//analog → digital 로 변경된 value 값 리턴
  b6:	90 e0       	ldi	r25, 0x00	; 0
}
  b8:	92 2b       	or	r25, r18
  ba:	08 95       	ret

000000bc <main>:

//레지스터들은 그냥선언보다 and 나 or 연산으로 선언하는 습관을 들이자 

int main()
{
	init_adc();
  bc:	f0 df       	rcall	.-32     	; 0x9e <init_adc>
	unsigned short value; 
	while(1)
	{
		value = adc_read();
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	f5 df       	rcall	.-22     	; 0xac <adc_read>
		if (value > 800) // 임의로 지정 LED 켜지게
  c2:	81 32       	cpi	r24, 0x21	; 33
  c4:	93 40       	sbci	r25, 0x03	; 3
  c6:	e0 f3       	brcs	.-8      	; 0xc0 <main+0x4>
			PORTA |= 0xff;
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	cb bb       	out	0x1b, r28	; 27
  cc:	f9 cf       	rjmp	.-14     	; 0xc0 <main+0x4>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
