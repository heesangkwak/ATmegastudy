
intrrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ed  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000835  00000000  00000000  00000b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000346  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042b  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b7  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
   2:	00 00       	nop
   4:	5d c0       	rjmp	.+186    	; 0xc0 <__bad_interrupt>
   6:	00 00       	nop
   8:	5b c0       	rjmp	.+182    	; 0xc0 <__bad_interrupt>
   a:	00 00       	nop
   c:	59 c0       	rjmp	.+178    	; 0xc0 <__bad_interrupt>
   e:	00 00       	nop
  10:	57 c0       	rjmp	.+174    	; 0xc0 <__bad_interrupt>
  12:	00 00       	nop
  14:	56 c0       	rjmp	.+172    	; 0xc2 <__vector_5>
  16:	00 00       	nop
  18:	53 c0       	rjmp	.+166    	; 0xc0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	51 c0       	rjmp	.+162    	; 0xc0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4f c0       	rjmp	.+158    	; 0xc0 <__bad_interrupt>
  22:	00 00       	nop
  24:	4d c0       	rjmp	.+154    	; 0xc0 <__bad_interrupt>
  26:	00 00       	nop
  28:	4b c0       	rjmp	.+150    	; 0xc0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	49 c0       	rjmp	.+146    	; 0xc0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	47 c0       	rjmp	.+142    	; 0xc0 <__bad_interrupt>
  32:	00 00       	nop
  34:	45 c0       	rjmp	.+138    	; 0xc0 <__bad_interrupt>
  36:	00 00       	nop
  38:	43 c0       	rjmp	.+134    	; 0xc0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	41 c0       	rjmp	.+130    	; 0xc0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3f c0       	rjmp	.+126    	; 0xc0 <__bad_interrupt>
  42:	00 00       	nop
  44:	3d c0       	rjmp	.+122    	; 0xc0 <__bad_interrupt>
  46:	00 00       	nop
  48:	3b c0       	rjmp	.+118    	; 0xc0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	39 c0       	rjmp	.+114    	; 0xc0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	37 c0       	rjmp	.+110    	; 0xc0 <__bad_interrupt>
  52:	00 00       	nop
  54:	35 c0       	rjmp	.+106    	; 0xc0 <__bad_interrupt>
  56:	00 00       	nop
  58:	33 c0       	rjmp	.+102    	; 0xc0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	31 c0       	rjmp	.+98     	; 0xc0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2f c0       	rjmp	.+94     	; 0xc0 <__bad_interrupt>
  62:	00 00       	nop
  64:	2d c0       	rjmp	.+90     	; 0xc0 <__bad_interrupt>
  66:	00 00       	nop
  68:	2b c0       	rjmp	.+86     	; 0xc0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	29 c0       	rjmp	.+82     	; 0xc0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	27 c0       	rjmp	.+78     	; 0xc0 <__bad_interrupt>
  72:	00 00       	nop
  74:	25 c0       	rjmp	.+74     	; 0xc0 <__bad_interrupt>
  76:	00 00       	nop
  78:	23 c0       	rjmp	.+70     	; 0xc0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	21 c0       	rjmp	.+66     	; 0xc0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1f c0       	rjmp	.+62     	; 0xc0 <__bad_interrupt>
  82:	00 00       	nop
  84:	1d c0       	rjmp	.+58     	; 0xc0 <__bad_interrupt>
  86:	00 00       	nop
  88:	1b c0       	rjmp	.+54     	; 0xc0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8a 00       	.word	0x008a	; ????
  8e:	8d 00       	.word	0x008d	; ????
  90:	90 00       	.word	0x0090	; ????
  92:	93 00       	.word	0x0093	; ????
  94:	96 00       	.word	0x0096	; ????
  96:	99 00       	.word	0x0099	; ????
  98:	9c 00       	.word	0x009c	; ????
  9a:	9f 00       	.word	0x009f	; ????
  9c:	a2 00       	.word	0x00a2	; ????
  9e:	a5 00       	.word	0x00a5	; ????

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	d0 e1       	ldi	r29, 0x10	; 16
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_clear_bss>:
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a2 30       	cpi	r26, 0x02	; 2
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	4a d0       	rcall	.+148    	; 0x152 <main>
  be:	6c c0       	rjmp	.+216    	; 0x198 <_exit>

000000c0 <__bad_interrupt>:
  c0:	9f cf       	rjmp	.-194    	; 0x0 <__vectors>

000000c2 <__vector_5>:
		
	}
}

ISR (INT4_vect) // 인터럽트 발생시 카운트 온
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	PORTA = 0x01;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9c e9       	ldi	r25, 0x9C	; 156
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <__vector_5+0x16>
  dc:	00 c0       	rjmp	.+0      	; 0xde <__vector_5+0x1c>
  de:	00 00       	nop
	_delay_ms(10); //10ms 간 기다린다.
	EIFR = 0x10; //인터럽트 리셋 EIFR으로 강제로 클리어 해준다 	
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	88 bf       	out	0x38, r24	; 56
	if((PINE = 0x10) == 0)
  e4:	81 b9       	out	0x01, r24	; 1
		return ;
	count++;
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <select_number>:
//}


void select_number(int num)
{
	switch (num){
 106:	8a 30       	cpi	r24, 0x0A	; 10
 108:	91 05       	cpc	r25, r1
 10a:	10 f5       	brcc	.+68     	; 0x150 <select_number+0x4a>
 10c:	fc 01       	movw	r30, r24
 10e:	ea 5b       	subi	r30, 0xBA	; 186
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	39 c0       	rjmp	.+114    	; 0x186 <__tablejump2__>
		case 0:
			PORTG = 63;
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		case 1:
			PORTG = 6;
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		case 2:
			PORTG = 91;
 120:	8b e5       	ldi	r24, 0x5B	; 91
 122:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		case 3:
			PORTG = 79;
 126:	8f e4       	ldi	r24, 0x4F	; 79
 128:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		case 4:
			PORTG = 102;
 12c:	86 e6       	ldi	r24, 0x66	; 102
 12e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		case 5:
			PORTG = 109;
 132:	8d e6       	ldi	r24, 0x6D	; 109
 134:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		case 6:
			PORTG = 124;
 138:	8c e7       	ldi	r24, 0x7C	; 124
 13a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		case 7:
			PORTG = 7;
 13e:	87 e0       	ldi	r24, 0x07	; 7
 140:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		case 8:
			PORTG = 127;
 144:	8f e7       	ldi	r24, 0x7F	; 127
 146:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		case 9:
			PORTG = 103;
 14a:	87 e6       	ldi	r24, 0x67	; 103
 14c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 150:	08 95       	ret

00000152 <main>:
void select_number(int num);
int count = 0;

int main(void)
{
	DDRA = 0x01;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xff; 
 15a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	SREG |= 0x80;  // 인터럽트 허용 
 15e:	8f b7       	in	r24, 0x3f	; 63
 160:	80 68       	ori	r24, 0x80	; 128
 162:	8f bf       	out	0x3f, r24	; 63
	EIMSK = 0x30;  // INT4, 5 번 인터럽트 허용
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x0f; // INT4, 5번 사용	상승엣지로 설정
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	8a bf       	out	0x3a, r24	; 58
	while(1){
		PORTA = 0x01;
 16c:	d1 e0       	ldi	r29, 0x01	; 1
		PORTG = 0x07;
 16e:	05 e6       	ldi	r16, 0x65	; 101
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	c7 e0       	ldi	r28, 0x07	; 7
	DDRG = 0xff; 
	SREG |= 0x80;  // 인터럽트 허용 
	EIMSK = 0x30;  // INT4, 5 번 인터럽트 허용
	EICRB = 0x0f; // INT4, 5번 사용	상승엣지로 설정
	while(1){
		PORTA = 0x01;
 174:	db bb       	out	0x1b, r29	; 27
		PORTG = 0x07;
 176:	f8 01       	movw	r30, r16
 178:	c0 83       	st	Z, r28
		select_number(count);
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 182:	c1 df       	rcall	.-126    	; 0x106 <select_number>
 184:	f7 cf       	rjmp	.-18     	; 0x174 <main+0x22>

00000186 <__tablejump2__>:
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	00 24       	eor	r0, r0
 18c:	00 1c       	adc	r0, r0
 18e:	0b be       	out	0x3b, r0	; 59
 190:	07 90       	elpm	r0, Z+
 192:	f6 91       	elpm	r31, Z
 194:	e0 2d       	mov	r30, r0
 196:	09 94       	ijmp

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
