
Bluetooth_study.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000003d4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011b1  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000996  00000000  00000000  00001739  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000643  00000000  00000000  000020cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002714  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000495  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000990  00000000  00000000  00002cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003669  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	52 d1       	rcall	.+676    	; 0x358 <main>
  b4:	8d c1       	rjmp	.+794    	; 0x3d0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <init_UART>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  c4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  ce:	08 95       	ret

000000d0 <tx>:
  d0:	eb e9       	ldi	r30, 0x9B	; 155
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	90 81       	ld	r25, Z
  d6:	95 ff       	sbrs	r25, 5
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <tx+0x4>
  da:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  de:	08 95       	ret

000000e0 <sort>:
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ec 01       	movw	r28, r24
  e6:	88 81       	ld	r24, Y
  e8:	88 23       	and	r24, r24
  ea:	51 f0       	breq	.+20     	; 0x100 <sort+0x20>
  ec:	8d 30       	cpi	r24, 0x0D	; 13
  ee:	41 f0       	breq	.+16     	; 0x100 <sort+0x20>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <sort+0x18>
  f4:	8d 30       	cpi	r24, 0x0D	; 13
  f6:	21 f0       	breq	.+8      	; 0x100 <sort+0x20>
  f8:	eb df       	rcall	.-42     	; 0xd0 <tx>
  fa:	89 91       	ld	r24, Y+
  fc:	81 11       	cpse	r24, r1
  fe:	fa cf       	rjmp	.-12     	; 0xf4 <sort+0x14>
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <rx>:
 106:	eb e9       	ldi	r30, 0x9B	; 155
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <rx+0x4>
 110:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 114:	08 95       	ret

00000116 <input_data>:
 116:	ef e9       	ldi	r30, 0x9F	; 159
 118:	ff e0       	ldi	r31, 0x0F	; 15
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <input_data+0x4>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <input_data+0xa>
 120:	00 00       	nop
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	95 bb       	out	0x15, r25	; 21
 126:	00 00       	nop
 128:	95 e0       	ldi	r25, 0x05	; 5
 12a:	95 bb       	out	0x15, r25	; 21
 12c:	00 c0       	rjmp	.+0      	; 0x12e <input_data+0x18>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <input_data+0x1a>
 130:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 134:	00 c0       	rjmp	.+0      	; 0x136 <input_data+0x20>
 136:	15 ba       	out	0x15, r1	; 21
 138:	f5 e0       	ldi	r31, 0x05	; 5
 13a:	fa 95       	dec	r31
 13c:	f1 f7       	brne	.-4      	; 0x13a <input_data+0x24>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <CMD>:
 142:	ef e9       	ldi	r30, 0x9F	; 159
 144:	ff e0       	ldi	r31, 0x0F	; 15
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <CMD+0x4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <CMD+0xa>
 14c:	00 00       	nop
 14e:	15 ba       	out	0x15, r1	; 21
 150:	00 00       	nop
 152:	94 e0       	ldi	r25, 0x04	; 4
 154:	95 bb       	out	0x15, r25	; 21
 156:	00 c0       	rjmp	.+0      	; 0x158 <CMD+0x16>
 158:	00 c0       	rjmp	.+0      	; 0x15a <CMD+0x18>
 15a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <CMD+0x1e>
 160:	15 ba       	out	0x15, r1	; 21
 162:	00 c0       	rjmp	.+0      	; 0x164 <CMD+0x22>
 164:	00 c0       	rjmp	.+0      	; 0x166 <CMD+0x24>
 166:	08 95       	ret

00000168 <input_string>:
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
 176:	88 81       	ld	r24, Y
 178:	88 23       	and	r24, r24
 17a:	51 f1       	breq	.+84     	; 0x1d0 <input_string+0x68>
 17c:	8d 30       	cpi	r24, 0x0D	; 13
 17e:	f9 f4       	brne	.+62     	; 0x1be <input_string+0x56>
 180:	27 c0       	rjmp	.+78     	; 0x1d0 <input_string+0x68>
 182:	f7 01       	movw	r30, r14
 184:	81 91       	ld	r24, Z+
 186:	7f 01       	movw	r14, r30
 188:	88 23       	and	r24, r24
 18a:	11 f1       	breq	.+68     	; 0x1d0 <input_string+0x68>
 18c:	8d 30       	cpi	r24, 0x0D	; 13
 18e:	01 f1       	breq	.+64     	; 0x1d0 <input_string+0x68>
 190:	c2 df       	rcall	.-124    	; 0x116 <input_data>
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	c0 31       	cpi	r28, 0x10	; 16
 196:	d1 05       	cpc	r29, r1
 198:	a1 f7       	brne	.-24     	; 0x182 <input_string+0x1a>
 19a:	80 ec       	ldi	r24, 0xC0	; 192
 19c:	d2 df       	rcall	.-92     	; 0x142 <CMD>
 19e:	f8 01       	movw	r30, r16
 1a0:	80 89       	ldd	r24, Z+16	; 0x10
 1a2:	88 23       	and	r24, r24
 1a4:	a9 f0       	breq	.+42     	; 0x1d0 <input_string+0x68>
 1a6:	8d 30       	cpi	r24, 0x0D	; 13
 1a8:	99 f0       	breq	.+38     	; 0x1d0 <input_string+0x68>
 1aa:	e8 01       	movw	r28, r16
 1ac:	61 96       	adiw	r28, 0x11	; 17
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <input_string+0x4c>
 1b0:	8d 30       	cpi	r24, 0x0D	; 13
 1b2:	71 f0       	breq	.+28     	; 0x1d0 <input_string+0x68>
 1b4:	b0 df       	rcall	.-160    	; 0x116 <input_data>
 1b6:	89 91       	ld	r24, Y+
 1b8:	81 11       	cpse	r24, r1
 1ba:	fa cf       	rjmp	.-12     	; 0x1b0 <input_string+0x48>
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <input_string+0x68>
 1be:	8e 01       	movw	r16, r28
 1c0:	aa df       	rcall	.-172    	; 0x116 <input_data>
 1c2:	7e 01       	movw	r14, r28
 1c4:	ff ef       	ldi	r31, 0xFF	; 255
 1c6:	ef 1a       	sub	r14, r31
 1c8:	ff 0a       	sbc	r15, r31
 1ca:	c1 e0       	ldi	r28, 0x01	; 1
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	d9 cf       	rjmp	.-78     	; 0x182 <input_string+0x1a>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	08 95       	ret

000001de <init_LCD>:
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	83 ef       	ldi	r24, 0xF3	; 243
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <init_LCD+0x6>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <init_LCD+0x10>
 1ee:	00 00       	nop
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	a7 df       	rcall	.-178    	; 0x142 <CMD>
 1f4:	8f e1       	ldi	r24, 0x1F	; 31
 1f6:	9e e4       	ldi	r25, 0x4E	; 78
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <init_LCD+0x1a>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <init_LCD+0x20>
 1fe:	00 00       	nop
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	9f df       	rcall	.-194    	; 0x142 <CMD>
 204:	83 e9       	ldi	r24, 0x93	; 147
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <init_LCD+0x2a>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <init_LCD+0x30>
 20e:	00 00       	nop
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	97 df       	rcall	.-210    	; 0x142 <CMD>
 214:	00 c0       	rjmp	.+0      	; 0x216 <init_LCD+0x38>
 216:	88 e3       	ldi	r24, 0x38	; 56
 218:	94 df       	rcall	.-216    	; 0x142 <CMD>
 21a:	95 ed       	ldi	r25, 0xD5	; 213
 21c:	9a 95       	dec	r25
 21e:	f1 f7       	brne	.-4      	; 0x21c <init_LCD+0x3e>
 220:	00 00       	nop
 222:	8f e0       	ldi	r24, 0x0F	; 15
 224:	8e df       	rcall	.-228    	; 0x142 <CMD>
 226:	25 ed       	ldi	r18, 0xD5	; 213
 228:	2a 95       	dec	r18
 22a:	f1 f7       	brne	.-4      	; 0x228 <init_LCD+0x4a>
 22c:	00 00       	nop
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	88 df       	rcall	.-240    	; 0x142 <CMD>
 232:	8f e0       	ldi	r24, 0x0F	; 15
 234:	98 e1       	ldi	r25, 0x18	; 24
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <init_LCD+0x58>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <init_LCD+0x5e>
 23c:	00 00       	nop
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	80 df       	rcall	.-256    	; 0x142 <CMD>
 242:	95 ed       	ldi	r25, 0xD5	; 213
 244:	9a 95       	dec	r25
 246:	f1 f7       	brne	.-4      	; 0x244 <init_LCD+0x66>
 248:	00 00       	nop
 24a:	08 95       	ret

0000024c <stop>:
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	88 bb       	out	0x18, r24	; 24
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	83 ed       	ldi	r24, 0xD3	; 211
 254:	90 e3       	ldi	r25, 0x30	; 48
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <stop+0xa>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <stop+0x14>
 260:	00 00       	nop
 262:	08 95       	ret

00000264 <CCW>:
 264:	86 e1       	ldi	r24, 0x16	; 22
 266:	88 bb       	out	0x18, r24	; 24
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	83 ed       	ldi	r24, 0xD3	; 211
 26c:	90 e3       	ldi	r25, 0x30	; 48
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <CCW+0xa>
 276:	00 c0       	rjmp	.+0      	; 0x278 <CCW+0x14>
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <select_motoer>:
	PORTB= 0x15;
	_delay_ms(1000);
}

void select_motoer(char * arr)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	a8 97       	sbiw	r28, 0x28	; 40
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	fc 01       	movw	r30, r24
	
	switch (arr[0]){
 292:	90 81       	ld	r25, Z
 294:	93 35       	cpi	r25, 0x53	; 83
 296:	69 f1       	breq	.+90     	; 0x2f2 <select_motoer+0x76>
 298:	18 f4       	brcc	.+6      	; 0x2a0 <select_motoer+0x24>
 29a:	97 34       	cpi	r25, 0x47	; 71
 29c:	31 f0       	breq	.+12     	; 0x2aa <select_motoer+0x2e>
 29e:	53 c0       	rjmp	.+166    	; 0x346 <select_motoer+0xca>
 2a0:	97 36       	cpi	r25, 0x67	; 103
 2a2:	19 f0       	breq	.+6      	; 0x2aa <select_motoer+0x2e>
 2a4:	93 37       	cpi	r25, 0x73	; 115
 2a6:	29 f1       	breq	.+74     	; 0x2f2 <select_motoer+0x76>
 2a8:	4e c0       	rjmp	.+156    	; 0x346 <select_motoer+0xca>
		case 'g':
		case 'G':
			if (arr[1]=='O' || arr[1]=='o')
 2aa:	81 81       	ldd	r24, Z+1	; 0x01
 2ac:	8f 7d       	andi	r24, 0xDF	; 223
 2ae:	8f 34       	cpi	r24, 0x4F	; 79
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <select_motoer+0x38>
 2b2:	49 c0       	rjmp	.+146    	; 0x346 <select_motoer+0xca>
			{
				char message[40] = "motor CW";
 2b4:	89 e0       	ldi	r24, 0x09	; 9
 2b6:	e0 e0       	ldi	r30, 0x00	; 0
 2b8:	f1 e0       	ldi	r31, 0x01	; 1
 2ba:	de 01       	movw	r26, r28
 2bc:	11 96       	adiw	r26, 0x01	; 1
 2be:	01 90       	ld	r0, Z+
 2c0:	0d 92       	st	X+, r0
 2c2:	8a 95       	dec	r24
 2c4:	e1 f7       	brne	.-8      	; 0x2be <select_motoer+0x42>
 2c6:	fe 01       	movw	r30, r28
 2c8:	3a 96       	adiw	r30, 0x0a	; 10
 2ca:	8f e1       	ldi	r24, 0x1F	; 31
 2cc:	df 01       	movw	r26, r30
 2ce:	1d 92       	st	X+, r1
 2d0:	8a 95       	dec	r24
 2d2:	e9 f7       	brne	.-6      	; 0x2ce <select_motoer+0x52>
				CMD(Clear_Display);
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	35 df       	rcall	.-406    	; 0x142 <CMD>
 2d8:	8f e0       	ldi	r24, 0x0F	; 15
 2da:	98 e1       	ldi	r25, 0x18	; 24
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <select_motoer+0x60>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <select_motoer+0x66>
 2e2:	00 00       	nop
				_delay_ms(1.54);
				
				CMD(Line_1);
 2e4:	80 e8       	ldi	r24, 0x80	; 128
 2e6:	2d df       	rcall	.-422    	; 0x142 <CMD>
				input_string(message);	
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
				CCW();
 2ec:	3d df       	rcall	.-390    	; 0x168 <input_string>
 2ee:	ba df       	rcall	.-140    	; 0x264 <CCW>
 2f0:	2a c0       	rjmp	.+84     	; 0x346 <select_motoer+0xca>
			}
		break;
		case 'S':
		case 's':
			if (arr[1]=='t' || arr[1]=='T')
 2f2:	81 81       	ldd	r24, Z+1	; 0x01
 2f4:	8f 7d       	andi	r24, 0xDF	; 223
 2f6:	84 35       	cpi	r24, 0x54	; 84
 2f8:	31 f5       	brne	.+76     	; 0x346 <select_motoer+0xca>
			{
				if (arr[2]=='O' || arr[2]=='o')
 2fa:	82 81       	ldd	r24, Z+2	; 0x02
 2fc:	8f 7d       	andi	r24, 0xDF	; 223
 2fe:	8f 34       	cpi	r24, 0x4F	; 79
 300:	11 f5       	brne	.+68     	; 0x346 <select_motoer+0xca>
				{
					if (arr[3]=='p' || arr[3]=='P')
 302:	83 81       	ldd	r24, Z+3	; 0x03
 304:	8f 7d       	andi	r24, 0xDF	; 223
 306:	80 35       	cpi	r24, 0x50	; 80
 308:	f1 f4       	brne	.+60     	; 0x346 <select_motoer+0xca>
					{
						char message[40] = "motor STOP";
 30a:	8b e0       	ldi	r24, 0x0B	; 11
 30c:	e8 e2       	ldi	r30, 0x28	; 40
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	de 01       	movw	r26, r28
 312:	11 96       	adiw	r26, 0x01	; 1
 314:	01 90       	ld	r0, Z+
 316:	0d 92       	st	X+, r0
 318:	8a 95       	dec	r24
 31a:	e1 f7       	brne	.-8      	; 0x314 <select_motoer+0x98>
 31c:	fe 01       	movw	r30, r28
 31e:	3c 96       	adiw	r30, 0x0c	; 12
 320:	8d e1       	ldi	r24, 0x1D	; 29
 322:	df 01       	movw	r26, r30
 324:	1d 92       	st	X+, r1
 326:	8a 95       	dec	r24
					
						CMD(Clear_Display);
 328:	e9 f7       	brne	.-6      	; 0x324 <select_motoer+0xa8>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0a df       	rcall	.-492    	; 0x142 <CMD>
 32e:	8f e0       	ldi	r24, 0x0F	; 15
 330:	98 e1       	ldi	r25, 0x18	; 24
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <select_motoer+0xb6>
 336:	00 c0       	rjmp	.+0      	; 0x338 <select_motoer+0xbc>
						_delay_ms(1.54);
						
						CMD(Line_1);
 338:	00 00       	nop
 33a:	80 e8       	ldi	r24, 0x80	; 128
						input_string(message);
 33c:	02 df       	rcall	.-508    	; 0x142 <CMD>
 33e:	ce 01       	movw	r24, r28
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	12 df       	rcall	.-476    	; 0x168 <input_string>
						stop();
 344:	83 df       	rcall	.-250    	; 0x24c <stop>
 346:	a8 96       	adiw	r28, 0x28	; 40
			}	
				}
					}
	
	}
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <main>:
 358:	cf 93       	push	r28
void CW();

void select_motoer(char* arr);

int main(void)
{
 35a:	df 93       	push	r29
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	e2 97       	sbiw	r28, 0x32	; 50
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
	DDRF = 0xff;
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRC = 0xff;
 372:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xff;
 374:	87 bb       	out	0x17, r24	; 23
	init_LCD();
 376:	33 df       	rcall	.-410    	; 0x1de <init_LCD>
	init_UART();
 378:	9f de       	rcall	.-706    	; 0xb8 <init_UART>
 37a:	00 e0       	ldi	r16, 0x00	; 0
	char input_value[50];
	char value;
	int i = 0,processer = 0;
 37c:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		value = rx();
 37e:	c3 de       	rcall	.-634    	; 0x106 <rx>
 380:	8a 30       	cpi	r24, 0x0A	; 10
		if (value == '\n' )
 382:	79 f4       	brne	.+30     	; 0x3a2 <main+0x4a>
 384:	e1 e0       	ldi	r30, 0x01	; 1
		{
			input_value[i] = '\0';
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	ec 0f       	add	r30, r28
 38a:	fd 1f       	adc	r31, r29
 38c:	e0 0f       	add	r30, r16
 38e:	f1 1f       	adc	r31, r17
 390:	10 82       	st	Z, r1
				//_delay_ms(1.54);
				//
				//CMD(Line_1);
				//input_string(input_value);
				//
				sort(input_value);
 392:	ce 01       	movw	r24, r28
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	a4 de       	rcall	.-696    	; 0xe0 <sort>
				tx('\n');
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	9a de       	rcall	.-716    	; 0xd0 <tx>
 39c:	00 e0       	ldi	r16, 0x00	; 0
			}
		}
		if (processer == 1) // 배열에 수신데이터를 다 입력했을 경우
		{
			processer = 0;
			i = 0;
 39e:	10 e0       	ldi	r17, 0x00	; 0
 3a0:	13 c0       	rjmp	.+38     	; 0x3c8 <main+0x70>
				//CMD(Line_1);
				//input_string(input_value);
				//
				sort(input_value);
				tx('\n');
				break;
 3a2:	8d 30       	cpi	r24, 0x0D	; 13
			input_value[i] = '\0';
			processer = 1;
		}
		else
		{
			if(value == 0x0d)
 3a4:	41 f4       	brne	.+16     	; 0x3b6 <main+0x5e>
 3a6:	e1 e0       	ldi	r30, 0x01	; 1
			input_value[i] = '\0';
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	ec 0f       	add	r30, r28
 3ac:	fd 1f       	adc	r31, r29
 3ae:	e0 0f       	add	r30, r16
 3b0:	f1 1f       	adc	r31, r17
 3b2:	10 82       	st	Z, r1
 3b4:	09 c0       	rjmp	.+18     	; 0x3c8 <main+0x70>
 3b6:	e1 e0       	ldi	r30, 0x01	; 1
			else
			{
				input_value[i] = value;
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	ec 0f       	add	r30, r28
 3bc:	fd 1f       	adc	r31, r29
 3be:	e0 0f       	add	r30, r16
 3c0:	f1 1f       	adc	r31, r17
 3c2:	80 83       	st	Z, r24
				i++;
 3c4:	0f 5f       	subi	r16, 0xFF	; 255
 3c6:	1f 4f       	sbci	r17, 0xFF	; 255
				sort(input_value);
				tx('\n');
				break;
			}
		}
		select_motoer(input_value);
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	57 df       	rcall	.-338    	; 0x27c <select_motoer>
 3ce:	d7 cf       	rjmp	.-82     	; 0x37e <main+0x26>

000003d0 <_exit>:
		
	}
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>
